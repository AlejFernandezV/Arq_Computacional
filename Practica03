#include "AsyncTaskLib.h"
#include <LiquidCrystal.h>
#include <EEPROM.h>
#include <Keypad.h>

//Initialize AsynkTask
void tempSystem(void);
void lightSystem(void);
void microSystem(void);

AsyncTask asyncTaskTemp(2000,true, tempSystem);
AsyncTask asyncTaskLight(1000,true, lightSystem);
AsyncTask asyncTaskMicro(1000, true, microSystem);

//Initialize LiquidCrystal
LiquidCrystal lcd {12,11,5,4,3,2};//Pinouts: RS, En, D4, D5, D6, D7.//TODO: 12,11,5,4,3,2

//Initialize Keypad
#define ROWS 4 //four rows
#define COLS 3 //three columns
char keys[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
  {'*','0','#'}
};
byte rowPins[ROWS] = {23, 25, 27, 29}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {22, 24, 26}; //connect to the column pinouts of the keypad

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

//Pin connections - RGB LED (Always in the PWM field)
#define REDPIN 8
#define GREENPIN 9
#define BLUEPIN 10
//Pin connections - Rotary Encoder
#define CLKPIN 32
#define DTPIN 34
#define SWPIN 36
//Pin connections - Sensors
#define TEMP A0
#define LIGHT A1
#define MICRO A2
#define DO_MICRO 26
#define LED_MICRO 13
#define BUZZER 48
//Address EEPROM
#define ADDRESS_TEMP_HIGH 0
#define ADDRESS_TEMP_LOW 3
#define ADDRESS_LIGHT 6
#define ADDRESS_MICRO 9
//Maths
#define BETA 4090

//Melody - Buzzer
int c=261; 
int d=294;
int e=329;
int f=349;
int g=391;
int gS=415;
int a=440;
int aS=455;
int b=466;
int cH=523;
int cSH=554;
int dH=587;
int dSH=622;
int eH=659;
int fH=698;
int fSH=740;
int gH=783;
int gSH=830;
int aH=880;

//Variables - Menu
int posSetMenu = 0;
int auxPosMenu = 0;
//Variables - RotaryEncoder
bool clkState  = LOW;
bool clkLast  = HIGH;
bool swState  = HIGH;
bool swLast  = HIGH;
//Variables - Sensors
float tempValue =0.0;
int lightValue =0;
//Variables - Security system
int pos=0;
int attempt = 0;
//Variables - Password
char secretCode[7] = {'8','7','6','1','8','9','#'};
char enterCode[7]={'0','0','0','0','0','0','#'};
//Variables - Read value
char enterValue[3]={'*','*','*'};
//Variables - System values
int tempHigh=0;
int tempLow=0;
int light=0;
int micro=0;

void setup() {
  //Init lcd 16x2
  lcd.begin(16, 2);
  //Init Serial USB
  Serial.begin(9600);
  Serial.println(F("Initialize System"));
  //Init Rotary
  pinMode(CLKPIN,INPUT);
  pinMode(DTPIN,INPUT);
  pinMode(SWPIN,INPUT_PULLUP);
   //Initialize RGB LED
  pinMode(REDPIN, OUTPUT);
  pinMode(GREENPIN, OUTPUT);
  pinMode(BLUEPIN, OUTPUT);
  //Initialize led microphone
  pinMode(LED_MICRO,OUTPUT);
  loadSystemValues();
  //AsyncTasks 
  asyncTaskTemp.Start();
  asyncTaskLight.Start();
}

void loop() {
  securitySystem();
}
//EEPROM
void loadSystemValues(){
  EEPROM.get(ADDRESS_TEMP_HIGH,tempHigh);
  EEPROM.get(ADDRESS_TEMP_LOW,tempLow);
  EEPROM.get(ADDRESS_LIGHT,light);
  EEPROM.get(ADDRESS_MICRO,micro);
}
//tone functions
void toneWith(int nota, int time_ms){
  tone(BUZZER, nota, time_ms);
  delay(time_ms+50);
}
//Song StarWars
void song(){
  toneWith(a,500);
  toneWith(a,500);
  toneWith(a,500);
  toneWith(f,350);
  toneWith(cH,150);
  toneWith(a,500);
  toneWith(f,350);
  toneWith(cH,150);
  toneWith(a,500);
  toneWith(eH,500);
  toneWith(eH,500);
  toneWith(eH,500);
  toneWith(fH,350);
  toneWith(cH,150);
  toneWith(gS,500);
  toneWith(f,350);
  toneWith(cH,150);
  toneWith(a,1000);
  toneWith(aH,500);
  toneWith(a,350);
  toneWith(a,150);
  toneWith(aH,500);
  toneWith(gSH,250);
  toneWith(gH,250);
  toneWith(fSH,125);
  toneWith(fH,125);
  toneWith(fSH,250);
  delay(250);
  toneWith(aS,250);
  toneWith(dSH,500);
  toneWith(dH,250);
  toneWith(cSH,250);  
  // virtuosismo :)))
  toneWith(cH,125);
  toneWith(b,125);
  toneWith(cH,250);
  delay(250);
  toneWith(f,125);
  toneWith(gS,500);
  toneWith(f,375);
  toneWith(a,125);
  toneWith(cH,500);
  toneWith(a,375);
  toneWith(cH,125);
  toneWith(eH,1000);
  toneWith(aH,500);
  toneWith(a,350);
  toneWith(a,150);
  toneWith(aH,500);
  toneWith(gSH,250);
  toneWith(gH,250);
  toneWith(fSH,125);
  toneWith(fH,125);
  toneWith(fSH,250);
  delay(250);
  toneWith(aS,250);
  toneWith(dSH,500);
  toneWith(dH,250);
  toneWith(cSH,250);
  toneWith(cH,125);
  toneWith(b,125);
  toneWith(cH,250);     
  delay(250);
  toneWith(f,250);
  toneWith(gS,500);
  toneWith(f,375);
  toneWith(cH,125);
  toneWith(a,500);
  toneWith(f,375);
  toneWith(c,125);
  toneWith(a,1000);
}
//security system
void securitySystem(){
    if(attempt < 3) enterPassword();
    else lockSystem();
}
void enterPassword(){
  lcdSetPrint(0,0,"PASSWORD:");
  char key = keypad.getKey();
  if(key){
    if(key=='#'||pos==7) {
      check();
      }
    else {
      readPassword(key);
      }
  }  
}
void readPassword(char key){
  lcdSetPrint(pos,1,"*");
  enterCode[pos]=key;
  pos++;
}
void check(){
    for(pos=0;pos<7;pos++){
      if(enterCode[pos]!=secretCode[pos]){
        wrongPassword();
        return;
      }
    }
    correctPassword();
}
void wrongPassword(){
  lcdSetPrint(0,1," WRONG!");
  enterCode[6]='#';
  ledWith(255,120,0,2000); //Orange and wait 2 seconds.
  if(attempt<2){
    lcdSetPrint(0,1,"TRY AGAIN!");
    ledWith(0,0,0,2000); //Led turn off...
    }
  lcd.clear();
  pos = 0;
  attempt++;
}
void correctPassword(){
  lcdSetPrint(0,1,"CORRECT");
  delay(1500);
  lcd.clear();
  lcdSetPrint(0,0,"WELCOME");
  ledWith(0,255,0,2000);  //Green
  ledWith(0,0,0,2000);
  
  unlockSystem();
  lcd.clear();
}
void lockSystem(){
  lcdSetPrint(0,0,"SYSTEM LOCKED");
  ledWith(255,0,0,5000);  //Led RGB Turn-On Red
  ledWith(0,0,0,2000);    //Turn-off RGB
  pos = attempt = 0;
  song();
  lcd.clear();
}
void unlockSystem(){
    pos=attempt=0;
    menuStart();
}
//rotary encoder functions
void readRotary(int &rotVal, int maxOption) {
  // gestion position
  clkState = digitalRead(CLKPIN);
  if ((clkLast == LOW) && (clkState == HIGH)) {//rotary moving
    Serial.print("Rotary position ");
    if (digitalRead(DTPIN) == HIGH) {
      rotVal = rotVal - 1;
      if ( rotVal < 0 ) {
        rotVal = 0;
      }
    }
    else {
      rotVal++;
      if ( rotVal > maxOption ) {
        rotVal = maxOption;
      }
    }
    Serial.println(rotVal);
  }
  clkLast = clkState;
}
boolean isPressedRotary(){//gestion bouton in rotary
  swState = digitalRead(SWPIN);
  if (swState == LOW && swLast == HIGH) {
    Serial.println("Rotary pressed");
    delay(500);//debounce
    swLast = swState;
    return true;
  }
  swLast = swState;
  return false;
}

//Start-menu
void menuStart(){
  boolean back=false;
  do{
    readRotary(auxPosMenu,1);
    if(auxPosMenu==0||auxPosMenu==1){
      showOptions("Setting  ","Run      ");
    }
    showSelected(auxPosMenu);
    if(isPressedRotary()){
      chooseMenuStart(auxPosMenu);
    }
  }while(back==false);
  auxPosMenu=0;
  lcd.clear();
}
void chooseMenuStart(int pos){
  if(pos==0){
    menuSetting();
  }
  if(pos==1){
    runn();
  }
}
//Setting - menu
void menuSetting(){
  boolean back=false;
  do{
    readRotary(posSetMenu,4);
    if(posSetMenu==0||posSetMenu==1){
      showOptions("UTemp    ","ULight   ");
    }else if(posSetMenu==2||posSetMenu==3){
      showOptions("UMicro   ","Reset    ");
    }
    else if(posSetMenu==4){
      showOptions("Back     ","         ");
    }
    showSelected(posSetMenu);
    if(isPressedRotary()){
      back=chooseSetMenu();
    }
  }while(back==false);
  posSetMenu=0;
  lcd.clear();
}
boolean chooseSetMenu(){
  switch(posSetMenu){
    case 0:
      menuSetTemp();
      break;
    case 1:
      menuSetLight();
      break;
    case 2:
      menuSetMicro();
      break;
    case 3: 
      menuResetValues();
      break;
    case 4:
      return true;
  }
  return false;
}
//options SetMenu
//Option 0: menuSetTemp
void menuSetTemp(){//Clear screen before to show menu
  boolean back=false;
  do{
    readRotary(auxPosMenu,2);
    if(auxPosMenu==0||auxPosMenu==1){
      showOptions("TempHigh ",tempHigh,"TempLow  ",tempLow);
    }
    if(auxPosMenu==2){
      showOptions("Back             ","                 ");
    }
    showSelected(auxPosMenu);
    if(isPressedRotary()){
      back=chooseSetTemp(auxPosMenu);
    }
  }while(back==false);
  auxPosMenu==0;
  lcd.clear();
}
boolean chooseSetTemp(int pos){
  if(pos==0){
    setTempHigh();
  }
  if(pos==1){
    setTempLow();
  }
  if(pos==2){
    return true;
  }
  return false;
}
//Option 0.0: setTempHigh
void setTempHigh(){
  int auxValue=-2;
  enterValueIn(auxValue);
  if(auxValue>tempLow&&auxValue<110){
    EEPROM.put(ADDRESS_TEMP_HIGH,auxValue);
    tempHigh=auxValue;
    successfulMessage();
  }
  else{
    wrongMessage();
  }
}
//Option 0.1: setTempLow
void setTempLow(){
  int auxValue=-2;
  enterValueIn(auxValue);
  if(auxValue>=0&&auxValue<tempHigh){
    EEPROM.put(ADDRESS_TEMP_LOW,auxValue);
    tempLow=auxValue;
    successfulMessage();
  }
  else{
    wrongMessage();
  }
}
//Option 1: menuSetLight
void menuSetLight(){
  boolean back=false;
  do{
    readRotary(auxPosMenu,1);
    if(auxPosMenu==0||auxPosMenu==1){
      showOptions("SetLight ",light,"Back     ");
    }
    showSelected(auxPosMenu);
    if(isPressedRotary()){
      back=chooseSetLight(auxPosMenu);
    }
  }while(back==false);
  auxPosMenu==0;
  lcd.clear();
}
boolean chooseSetLight(int pos){
  if(pos==0){
    setLight();
  }
  if(pos==1){
    return true;
  }
  return false;
}
//Option 1.0: setLight
void setLight(){
  int auxValue=-2;
  enterValueIn(auxValue);
  if(auxValue>=0&&auxValue<1000){
    EEPROM.put(ADDRESS_LIGHT,auxValue);
    light=auxValue;
    successfulMessage();
  }
  else{
    wrongMessage();
  }
}
//Option 2: menuSetMicro
void menuSetMicro(){//TODO: Show memory values
  boolean back=false;
  do{
    readRotary(auxPosMenu,1);
    if(auxPosMenu==0||auxPosMenu==1){
      showOptions("SetMicro ",micro,"Back     ");
    }
    showSelected(auxPosMenu);
    if(isPressedRotary()){
      back=chooseSetMicro(auxPosMenu);
    }
  }while(back==false);
  auxPosMenu==0;
  lcd.clear();
}
boolean chooseSetMicro(int pos){
  if(pos==0){
    setMicro();
  }
  if(pos==1){
    return true;
  }
  return false;
}
//Option 2.0: setMicro
void setMicro(){
  int auxValue=-2;
  enterValueIn(auxValue);
  if(auxValue>=0&&auxValue<100){
    EEPROM.put(ADDRESS_MICRO,auxValue);
    micro=auxValue;
    successfulMessage();
  }
  else{
    wrongMessage();
  }
}
//Option 3: menuResetValues
void menuResetValues(){
  boolean back=false;
  do{
    readRotary(auxPosMenu,1);
    if(auxPosMenu==0||auxPosMenu==1){
      showOptions("Ok       ","Back     ");
    }
    showSelected(auxPosMenu);
    if(isPressedRotary()){
      back=chooseResetValues(auxPosMenu);
    }
  }while(back==false);
  auxPosMenu==0;
  lcd.clear();
}
boolean chooseResetValues(int pos){
  if(pos==0){
    resetValues();
  }
  if(pos==1){
    return true;
  }
  return false;
}
//reset values for System
void resetValues(){
  tempHigh=25;
  EEPROM.put(ADDRESS_TEMP_HIGH,tempHigh);
  tempLow=15;
  EEPROM.put(ADDRESS_TEMP_LOW,tempLow);
  light=850;
  EEPROM.put(ADDRESS_LIGHT,light);
  micro=30;
  EEPROM.put(ADDRESS_MICRO,micro);
  successfulMessage();
}
//show two options in lcd
void showOptions(char highOption[], char lowOption[]){
  lcdSetPrint(1,0,highOption);
  lcdSetPrint(1,1,lowOption);
}
void showOptions(char highOption[],int highValue, char lowOption[],int lowValue){
  lcdSetPrint(1,0,highOption);
  lcdSetPrint(12,0,highValue);
  lcdSetPrint(1,1,lowOption);
  lcdSetPrint(12,1,lowValue);
}
void showOptions(char highOption[],int highValue, char lowOption[]){
  lcdSetPrint(1,0,highOption);
  lcdSetPrint(12,0,highValue);
  lcdSetPrint(1,1,lowOption);
}
void showOptions(char highOption[], char lowOption[],int lowValue){
  lcdSetPrint(1,0,highOption);
  lcdSetPrint(1,1,lowOption);
  lcdSetPrint(12,1,lowValue);
}
//show '-' in the left when is selected
void showSelected(int pos){
  if(pos%2==0){
    lcdSetPrint(0,0,'-');
    lcdSetPrint(0,1,' ');
  }
  else{
    lcdSetPrint(0,0,' ');
    lcdSetPrint(0,1,'-');
  }
}
//run
void runn(){
  lcd.clear();
  boolean varInit=true;
  while(varInit){
    asyncTaskTemp.Update();
    asyncTaskLight.Update();
  }
  
}
//System functions
void microSystem(){
  int soundValue = analogRead(MICRO);
  lcdSetPrint(6,0,"     ");  
  lcdSetPrint(6,0,soundValue);
  Serial.print(millis()/1000);
  Serial.print(", read micro: ");
  Serial.println(soundValue);
  if(soundValue >micro){
    digitalWrite(LED_MICRO,HIGH);
    delay(2000);
  }
  else{
    digitalWrite(LED_MICRO,LOW);
  }
}
void tempSystem(){
  tempValue=getTempValue();
  lcdSetPrint(0,0,"Temp:"); 
  lcdSetPrint(6,0,"       ");  
  lcdSetPrint(6,0,tempValue);
  Serial.print(millis()/1000);
  Serial.print(", read temp: "); //1,read temp 24 C
  Serial.println(tempValue);
  if(tempValue>tempHigh){
    setColor(255,0,0);  //RGB turn-on red
  }
  else{
    if(tempValue<tempLow){
      setColor(0,0,255);//RGB turn-on blue
    }
    else{
      setColor(0,255,0);//RGB turn-on green
    }
  }
}
void lightSystem(){
  lightValue=analogRead(LIGHT);
  lcdSetPrint(0,1,"Light:");
  lcdSetPrint(7,1,"       ");
  lcdSetPrint(7,1,lightValue);
  Serial.print(millis()/1000);
  Serial.print(", read light: ");
  Serial.println(lightValue);
  if(lightValue>light){
    setColor(128,0,128); //RGB turn-on purple
  }
  else{
      setColor(255,233,0); //RGB turn-on yellow
  }
}
//led RGB - functions
void setColor(int red, int green, int blue){
  analogWrite(REDPIN,red);
  analogWrite(GREENPIN,green);
  analogWrite(BLUEPIN,blue);
}
void ledWith(int r, int g, int b, int time_ms){
  setColor(r,g,b);
  delay(time_ms);
}
//temp functions
float getTempValue(){
  long a=1023-analogRead(TEMP);   //read thermistor value
  float tempC=BETA/(log((1025.0*10/a-10)/10)+BETA/298.0)-273.0;  //the calculating formula of temperature
  return tempC;
}
//message in lcd succesful
void successfulMessage(){
  lcd.clear();
  lcdSetPrint(2,0,"Successful!");
  delay(2000);
  lcd.clear();
}
void wrongMessage(){
  lcd.clear();
  lcdSetPrint(2,0,"Wrong!");
  delay(2000);
  lcd.clear();
}
//lcd functions
void lcdSetPrint(int c, int f, char message[]){
  lcd.setCursor(c, f);
  lcd.print(message);
}
void lcdSetPrint(int c, int f, int value){
  lcd.setCursor(c, f);
  lcd.print(value);
}
void lcdSetPrint(int c, int f, float value){
  lcd.setCursor(c, f);
  lcd.print(value);
}
void lcdSetPrint(int c, int f, char value){
  lcd.setCursor(c, f);
  lcd.print(value);
}
//Value - functions
void enterValueIn(int &value){
  lcd.clear();
  boolean auxBack=false;
  while(auxBack==false){
    lcdSetPrint(0,0,"Reading:");
    char key = keypad.getKey();
    if(isPressedRotary()) {
      if(enterValue[0]!='*'){
        value=parseValue();
        clearEnterValue();
      }
      lcd.clear();
      return;
    }
    if(key){
      if(key=='*'){
        deleteValue();
      }
      else if(pos<3){
        readValue(key);
      }
    }
  }
}

void clearEnterValue(){
  enterValue[0]='*';
  enterValue[1]='*';
  enterValue[2]='*';
  pos=0;
}
void readValue(char key){
  lcdSetPrint(pos,1,key);
  enterValue[pos]=key;
  pos++;
}
void deleteValue(){
  if(pos>0){
    pos--; 
    lcdSetPrint(pos,1,' ');
    enterValue[pos]='*';
  }
}
int parseValue(){
    return atoi(enterValue);
}
